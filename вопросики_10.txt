1. какие уровни входят в модель OSI и за что они отвечают?


	Все уровни:
^
|	application - прикладной уровень - интерпретация отправленного или полученного пакета
		FTP, HTTP(S), SMTP, DNS, SSH, 
|	транспортный уровень - пакет дошел до адресата, ищем какому приложению нужно отправить
		port - процесс, который хочет получить данные, UDP, TCP
|	Internet IP - адрес - сетевой уровень - 4 байт, разделяется точками
		сетевой уровень - решается вопрос: как определить какому устройству и от какого устройства доставить пакет данных
|	Link - канальный - на нем надо договориться о передаче данных
		МАС - адрес - media access control - 6 байт, разделяется точками
__


	В OSI разбили уровни на несколько других: 
^
|   application
|   representation
|   session - синхронизация и шифрование
|   transport
|   Internet
|   link
|   physical


2. Перечислите основные особенности протоколов  TCP и UDP?

	На протоколы ложится задача надежности - поврежение пакета, потеря, дублирование, нарушение порядка покетов данных,
UDP - universal datagram protocol -  главное побыстрее доставить пакет
	- передает датаграмы
	 - быстрый
	 - выгодное использование в случаях:
		 - потоковое видео
		 - музыка


TCP - transfer control protocol - главное надежность
	 - передает потоки
	 - похож на телефонную связь по типу передачи данных
	 - устанавливает жествую связь
	 - выгодное использование в случаях:
		 - мессенджер, почта
		 - информация о платежах


3. Какие данные необходимы для сетевого взаимодействия?

(IP, port) - точка доступа - можно отправить сообщение, зная эту пару; дает адрес
сокет - псевдофайл; к нему привязывается пара (IP, port)
	- UDP - socket
	- TCP - socket



4. Какие функции выполняют пассивые и активные сокеты?

активные сокеты - читают, пишут - обмен данными после получения
пассивые сокеты - слушатель, принимает соединение
	(разделение нужно для гарантии надежности связи)



5. Как устанавливается логическое соединение протокола TCP?

      TCP-server:			|	TCP-client:	
acceptor - пассивный сокет		|   socket.connect()
acceptor.blind(endpoint)		|
acceptor.listen(size) - режим прослушки	|
socket					|
acceptor.accept(socket) - соединение	|






